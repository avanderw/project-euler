package project.euler.problem;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import project.euler.PrimeNumberUtil;
import project.euler.Utilities;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 extends AProblem {

    private final List<Integer> primes = PrimeNumberUtil.allPrimesUnder(1000000);

    @Override
    public String answer() {
        boolean found = false;
        Long i = 1L;
        Long triangleNumber = 0L;
        while (!found) {
            i++;
            triangleNumber = triangleNumber(i);
            found = Utilities.countDivisors(triangleNumber) > 500;
        }

        return "" + triangleNumber;
    }

    private Long triangleNumber(Long number) {
        return (number * (number + 1)) / 2;
    }

}
